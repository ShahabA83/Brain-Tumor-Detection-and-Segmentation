def unet(input_size=(128, 128, 1)):
    inputs = Input(input_size)

    c1 = Conv2D(64, 3, activation='relu', padding='same')(inputs)
    c1 = Conv2D(64, 3, activation='relu', padding='same')(c1)
    p1 = MaxPooling2D()(c1)

    c2 = Conv2D(128, 3, activation='relu', padding='same')(p1)
    c2 = Conv2D(128, 3, activation='relu', padding='same')(c2)
    p2 = MaxPooling2D()(c2)

    c3 = Conv2D(256, 3, activation='relu', padding='same')(p2)
    c3 = Conv2D(256, 3, activation='relu', padding='same')(c3)
    p3 = MaxPooling2D()(c3)

    c4 = Conv2D(512, 3, activation='relu', padding='same')(p3)
    c4 = Conv2D(512, 3, activation='relu', padding='same')(c4)
    d = Dropout(0.5)(c4)

    u1 = Conv2DTranspose(256, 2, strides=2, padding='same')(d)
    u1 = concatenate([u1, c3])
    c5 = Conv2D(256, 3, activation='relu', padding='same')(u1)
    c5 = Conv2D(256, 3, activation='relu', padding='same')(c5)

    u2 = Conv2DTranspose(128, 2, strides=2, padding='same')(c5)
    u2 = concatenate([u2, c2])
    c6 = Conv2D(128, 3, activation='relu', padding='same')(u2)
    c6 = Conv2D(128, 3, activation='relu', padding='same')(c6)

    u3 = Conv2DTranspose(64, 2, strides=2, padding='same')(c6)
    u3 = concatenate([u3, c1])
    c7 = Conv2D(64, 3, activation='relu', padding='same')(u3)
    c7 = Conv2D(64, 3, activation='relu', padding='same')(c7)

    outputs = Conv2D(1, 1, activation='sigmoid')(c7)

    model = Model(inputs, outputs)
    return model